{
	"info": {
		"_postman_id": "ce8dcf08-48af-4bfa-9c5c-a29972ab9cbd",
		"name": "Sumsub App Token Auth",
		"description": "# AppTokenUsageExamples\nExamples of signing requests using Sumsub authorization with App Tokens\n\nhttps://developers.sumsub.com/api-reference/#making-a-request\n\nPlease make sure to put your App Token and Secret Key at collection variables.\n\nThis repository contains some of the main Sum&Substance API methods.\nPlease share your feedback and suggestions using Telegram chat, dashboard livechat or email.\n\nUnfortunately, there is no proper way to sign form-data within Postman pre-request scripts. Please check out [code examples](https://github.com/SumSubstance/AppTokenUsageExamples) for more details.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Creating an applicant",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Applicant was created successfully\", function () {",
							"  pm.response.to.have.status(201);",
							"  if (pm.response.code == 200 || pm.response.code == 201) {",
							"      const jsonResponse = pm.response.json();",
							"      pm.environment.set(\"applicantId\", jsonResponse.id);",
							"      console.log(pm.variables.get(\"applicantId\"));",
							"  }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n          \"externalUserId\": \"{{externalUserId}}\",\n          \"email\": \"john.smith@sumsub.com\",\n          \"phone\": \"+449112081223\",\n          \"fixedInfo\": {\n              \"country\": \"GBR\",\n              \"placeOfBirth\": \"London\"\n          }\n      }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{sumsub_root_url}}/resources/applicants?levelName={{levelName}}",
					"host": [
						"{{sumsub_root_url}}"
					],
					"path": [
						"resources",
						"applicants"
					],
					"query": [
						{
							"key": "levelName",
							"value": "{{levelName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Requesting an accessToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Access Token was requested\", function () {",
							"  pm.response.to.have.status(200);",
							"  if (pm.response.code == 200 || pm.response.code == 201) {",
							"      const jsonResponse = pm.response.json();",
							"      console.log(\"accessToken: \" + jsonResponse.token + \" for user: \" + jsonResponse.userId);",
							"  }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{sumsub_root_url}}/resources/accessTokens?userId={{externalUserId}}&levelName={{levelName}}",
					"host": [
						"{{sumsub_root_url}}"
					],
					"path": [
						"resources",
						"accessTokens"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{externalUserId}}"
						},
						{
							"key": "levelName",
							"value": "{{levelName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Changin provided info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Applicant data was changed successfully\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Bradley\",\n    \"lastName\": \"Peak\",\n    \"dob\": \"1990-01-01\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{sumsub_root_url}}/resources/applicants/{{applicantId}}/fixedInfo",
					"host": [
						"{{sumsub_root_url}}"
					],
					"path": [
						"resources",
						"applicants",
						"{{applicantId}}",
						"fixedInfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting applicant status",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{sumsub_root_url}}/resources/applicants/{{applicantId}}/status",
					"host": [
						"{{sumsub_root_url}}"
					],
					"path": [
						"resources",
						"applicants",
						"{{applicantId}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting applicant data",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{sumsub_root_url}}/resources/applicants/{{applicantId}}/one",
					"host": [
						"{{sumsub_root_url}}"
					],
					"path": [
						"resources",
						"applicants",
						"{{applicantId}}",
						"one"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var secretKey = pm.variables.get(\"secret-key\");",
					"var stamp = Math.floor(Date.now() / 1000).toString();",
					"",
					"var externalUserId = \"random-postman-user-\" + Math.random().toString(36).substr(2, 9);",
					"",
					"pm.environment.set(\"externalUserId\", externalUserId);",
					"",
					"var valueToSign = stamp + pm.request.method.toUpperCase() + pm.request.url.toString();",
					"",
					"if (pm.request.body.formdata) {",
					"",
					"    throw new Error('Signing formData is not possible via Postman scripts');",
					"",
					"} else if (pm.request.body) {",
					"    valueToSign += pm.request.body;",
					"}",
					"",
					"valueToSign = valueToSign.replace(\"{{sumsub_root_url}}\", '')",
					"        .replace(\"{{applicantId}}\", pm.variables.get(\"applicantId\"))",
					"        .replace(\"{{levelName}}\", pm.variables.get(\"levelName\"))",
					"        .replace(\"{{externalUserId}}\", pm.variables.get(\"externalUserId\"));",
					"",
					"console.log('valueToSign: ', valueToSign);",
					"",
					"var signature = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA256(valueToSign,  secretKey));",
					"",
					"pm.request.headers.add({",
					"    key: \"X-App-Token\",",
					"    value: pm.variables.get(\"app-token\")",
					"});",
					"",
					"pm.request.headers.add({",
					"    key: \"X-App-Access-Ts\",",
					"    value: stamp",
					"});",
					"",
					"pm.request.headers.add({",
					"    key: \"X-App-Access-Sig\",",
					"    value: signature",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "app-token",
			"value": "",
			"type": "default"
		},
		{
			"key": "secret-key",
			"value": "",
			"type": "default"
		},
		{
			"key": "sumsub_root_url",
			"value": "https://api.sumsub.com",
			"type": "default"
		},
		{
			"key": "applicantId",
			"value": "",
			"type": "default"
		},
		{
			"key": "externalUserId",
			"value": "someUniqueUserIdPostman",
			"type": "default"
		},
		{
			"key": "levelName",
			"value": "basic-kyc-level",
			"type": "default"
		}
	]
}
